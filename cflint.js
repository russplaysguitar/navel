/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cflint = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"cfscript":3,"script":4,"EOF":5,"component_definition":6,"<":7,"CFSCRIPT":8,">":9,"statements":10,"/":11,"COMPONENT":12,"block":13,"component_opts":14,"component_opt":15,"NAME":16,"=":17,"STRING":18,"{":19,"}":20,"statement":21,"assignment":22,";":23,"expression":24,"function_definition":25,"control":26,"COMMENT_LINE":27,"COMMENT_LINES":28,"VAR":29,"variable":30,"item":31,"comparator":32,"operator":33,"constant":34,"anonymous_function":35,"function_call":36,"FUNCTION":37,"(":38,"function_opts":39,")":40,"item_list":41,"INCLUDE":42,"RETURN":43,",":44,"function_opt":45,"struct_options":46,"struct_opt":47,":":48,".":49,"[":50,"]":51,"boolean":52,"NUMBER":53,"TRUE":54,"FALSE":55,"==":56,"!=":57,">=":58,"<=":59,"&&":60,"||":61,"+":62,"-":63,"*":64,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"<",8:"CFSCRIPT",9:">",11:"/",12:"COMPONENT",16:"NAME",17:"=",18:"STRING",19:"{",20:"}",23:";",27:"COMMENT_LINE",28:"COMMENT_LINES",29:"VAR",37:"FUNCTION",38:"(",40:")",42:"INCLUDE",43:"RETURN",44:",",48:":",49:".",50:"[",51:"]",53:"NUMBER",54:"TRUE",55:"FALSE",56:"==",57:"!=",58:">=",59:"<=",60:"&&",61:"||",62:"+",63:"-",64:"*"},
productions_: [0,[3,2],[3,2],[4,8],[6,2],[6,3],[14,2],[14,1],[15,3],[13,3],[10,2],[10,1],[21,2],[21,2],[21,1],[21,1],[21,1],[21,1],[22,4],[22,3],[24,3],[24,3],[24,1],[31,1],[31,1],[31,1],[31,1],[25,6],[25,6],[25,5],[26,3],[26,3],[35,5],[35,5],[35,4],[36,4],[36,4],[36,3],[39,3],[39,1],[45,3],[46,3],[46,1],[47,3],[47,3],[30,3],[30,4],[30,2],[30,3],[30,2],[30,3],[30,1],[34,1],[34,1],[34,1],[52,1],[52,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[33,1],[33,1],[33,1],[33,1],[41,3],[41,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:return true;
break;
case 2:return true;
break;
}
},
table: [{3:1,4:2,6:3,7:[1,4],12:[1,5]},{1:[3]},{5:[1,6]},{5:[1,7]},{8:[1,8]},{13:9,14:10,15:12,16:[1,13],19:[1,11]},{1:[2,1]},{1:[2,2]},{9:[1,14]},{5:[2,4]},{13:15,15:16,16:[1,13],19:[1,11]},{10:17,16:[1,31],18:[1,39],19:[1,33],21:18,22:19,24:20,25:21,26:22,27:[1,23],28:[1,24],29:[1,25],30:26,31:27,34:34,35:35,36:36,37:[1,28],42:[1,29],43:[1,30],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[2,7],19:[2,7]},{17:[1,42]},{10:43,16:[1,31],18:[1,39],19:[1,33],21:18,22:19,24:20,25:21,26:22,27:[1,23],28:[1,24],29:[1,25],30:26,31:27,34:34,35:35,36:36,37:[1,28],42:[1,29],43:[1,30],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{5:[2,5]},{16:[2,6],19:[2,6]},{16:[1,31],18:[1,39],19:[1,33],20:[1,44],21:45,22:19,24:20,25:21,26:22,27:[1,23],28:[1,24],29:[1,25],30:26,31:27,34:34,35:35,36:36,37:[1,28],42:[1,29],43:[1,30],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{7:[2,11],16:[2,11],18:[2,11],19:[2,11],20:[2,11],27:[2,11],28:[2,11],29:[2,11],37:[2,11],42:[2,11],43:[2,11],50:[2,11],53:[2,11],54:[2,11],55:[2,11]},{23:[1,46]},{23:[1,47]},{7:[2,14],16:[2,14],18:[2,14],19:[2,14],20:[2,14],27:[2,14],28:[2,14],29:[2,14],37:[2,14],42:[2,14],43:[2,14],50:[2,14],53:[2,14],54:[2,14],55:[2,14]},{7:[2,15],16:[2,15],18:[2,15],19:[2,15],20:[2,15],27:[2,15],28:[2,15],29:[2,15],37:[2,15],42:[2,15],43:[2,15],50:[2,15],53:[2,15],54:[2,15],55:[2,15]},{7:[2,16],16:[2,16],18:[2,16],19:[2,16],20:[2,16],27:[2,16],28:[2,16],29:[2,16],37:[2,16],42:[2,16],43:[2,16],50:[2,16],53:[2,16],54:[2,16],55:[2,16]},{7:[2,17],16:[2,17],18:[2,17],19:[2,17],20:[2,17],27:[2,17],28:[2,17],29:[2,17],37:[2,17],42:[2,17],43:[2,17],50:[2,17],53:[2,17],54:[2,17],55:[2,17]},{16:[1,48]},{7:[2,23],9:[2,23],11:[2,23],17:[1,49],23:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],64:[2,23]},{7:[1,55],9:[1,54],11:[1,62],20:[2,22],23:[2,22],32:50,33:51,44:[2,22],51:[2,22],56:[1,52],57:[1,53],58:[1,56],59:[1,57],60:[1,58],61:[1,59],62:[1,60],63:[1,61],64:[1,63]},{16:[1,64],38:[1,65]},{18:[1,66]},{16:[1,31],18:[1,39],19:[1,33],24:67,30:68,31:27,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{7:[2,51],9:[2,51],11:[2,51],17:[2,51],20:[2,51],23:[2,51],38:[1,72],40:[2,51],44:[2,51],49:[1,70],50:[1,71],51:[2,51],56:[2,51],57:[2,51],58:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51]},{16:[1,31],18:[1,39],19:[1,33],24:74,30:68,31:27,34:34,35:35,36:36,37:[1,69],50:[1,32],51:[1,73],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[1,78],20:[1,75],46:76,47:77},{7:[2,24],9:[2,24],11:[2,24],17:[2,24],20:[2,24],23:[2,24],40:[2,24],44:[2,24],51:[2,24],56:[2,24],57:[2,24],58:[2,24],59:[2,24],60:[2,24],61:[2,24],62:[2,24],63:[2,24],64:[2,24]},{7:[2,25],9:[2,25],11:[2,25],17:[2,25],20:[2,25],23:[2,25],40:[2,25],44:[2,25],51:[2,25],56:[2,25],57:[2,25],58:[2,25],59:[2,25],60:[2,25],61:[2,25],62:[2,25],63:[2,25],64:[2,25]},{7:[2,26],9:[2,26],11:[2,26],17:[2,26],20:[2,26],23:[2,26],40:[2,26],44:[2,26],51:[2,26],56:[2,26],57:[2,26],58:[2,26],59:[2,26],60:[2,26],61:[2,26],62:[2,26],63:[2,26],64:[2,26]},{7:[2,52],9:[2,52],11:[2,52],17:[2,52],20:[2,52],23:[2,52],40:[2,52],44:[2,52],51:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52]},{7:[2,53],9:[2,53],11:[2,53],17:[2,53],20:[2,53],23:[2,53],40:[2,53],44:[2,53],51:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53]},{7:[2,54],9:[2,54],11:[2,54],17:[2,54],20:[2,54],23:[2,54],40:[2,54],44:[2,54],51:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54]},{7:[2,55],9:[2,55],11:[2,55],17:[2,55],20:[2,55],23:[2,55],40:[2,55],44:[2,55],51:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55]},{7:[2,56],9:[2,56],11:[2,56],17:[2,56],20:[2,56],23:[2,56],40:[2,56],44:[2,56],51:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56]},{18:[1,79]},{7:[1,80],16:[1,31],18:[1,39],19:[1,33],21:45,22:19,24:20,25:21,26:22,27:[1,23],28:[1,24],29:[1,25],30:26,31:27,34:34,35:35,36:36,37:[1,28],42:[1,29],43:[1,30],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{5:[2,9],7:[2,9],9:[2,9],11:[2,9],16:[2,9],17:[2,9],18:[2,9],19:[2,9],20:[2,9],23:[2,9],27:[2,9],28:[2,9],29:[2,9],37:[2,9],40:[2,9],42:[2,9],43:[2,9],44:[2,9],50:[2,9],51:[2,9],53:[2,9],54:[2,9],55:[2,9],56:[2,9],57:[2,9],58:[2,9],59:[2,9],60:[2,9],61:[2,9],62:[2,9],63:[2,9],64:[2,9]},{7:[2,10],16:[2,10],18:[2,10],19:[2,10],20:[2,10],27:[2,10],28:[2,10],29:[2,10],37:[2,10],42:[2,10],43:[2,10],50:[2,10],53:[2,10],54:[2,10],55:[2,10]},{7:[2,12],16:[2,12],18:[2,12],19:[2,12],20:[2,12],27:[2,12],28:[2,12],29:[2,12],37:[2,12],42:[2,12],43:[2,12],50:[2,12],53:[2,12],54:[2,12],55:[2,12]},{7:[2,13],16:[2,13],18:[2,13],19:[2,13],20:[2,13],27:[2,13],28:[2,13],29:[2,13],37:[2,13],42:[2,13],43:[2,13],50:[2,13],53:[2,13],54:[2,13],55:[2,13]},{17:[1,81]},{16:[1,31],18:[1,39],19:[1,33],24:82,30:68,31:27,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[1,31],18:[1,39],19:[1,33],30:68,31:83,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[1,31],18:[1,39],19:[1,33],30:68,31:84,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[2,57],18:[2,57],19:[2,57],37:[2,57],50:[2,57],53:[2,57],54:[2,57],55:[2,57]},{16:[2,58],18:[2,58],19:[2,58],37:[2,58],50:[2,58],53:[2,58],54:[2,58],55:[2,58]},{16:[2,59],18:[2,59],19:[2,59],37:[2,59],50:[2,59],53:[2,59],54:[2,59],55:[2,59]},{16:[2,60],18:[2,60],19:[2,60],37:[2,60],50:[2,60],53:[2,60],54:[2,60],55:[2,60]},{16:[2,61],18:[2,61],19:[2,61],37:[2,61],50:[2,61],53:[2,61],54:[2,61],55:[2,61]},{16:[2,62],18:[2,62],19:[2,62],37:[2,62],50:[2,62],53:[2,62],54:[2,62],55:[2,62]},{16:[2,63],18:[2,63],19:[2,63],37:[2,63],50:[2,63],53:[2,63],54:[2,63],55:[2,63]},{16:[2,64],18:[2,64],19:[2,64],37:[2,64],50:[2,64],53:[2,64],54:[2,64],55:[2,64]},{16:[2,65],18:[2,65],19:[2,65],37:[2,65],50:[2,65],53:[2,65],54:[2,65],55:[2,65]},{16:[2,66],18:[2,66],19:[2,66],37:[2,66],50:[2,66],53:[2,66],54:[2,66],55:[2,66]},{16:[2,67],18:[2,67],19:[2,67],37:[2,67],50:[2,67],53:[2,67],54:[2,67],55:[2,67]},{16:[2,68],18:[2,68],19:[2,68],37:[2,68],50:[2,68],53:[2,68],54:[2,68],55:[2,68]},{38:[1,85]},{16:[1,91],18:[1,39],19:[1,33],30:68,31:90,34:34,35:35,36:36,37:[1,69],39:86,40:[1,88],41:87,45:89,50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{23:[1,92]},{23:[1,93]},{7:[2,23],9:[2,23],11:[2,23],17:[2,23],20:[2,23],23:[2,23],40:[2,23],44:[2,23],51:[2,23],56:[2,23],57:[2,23],58:[2,23],59:[2,23],60:[2,23],61:[2,23],62:[2,23],63:[2,23],64:[2,23]},{38:[1,65]},{16:[1,31],18:[1,39],19:[1,33],30:68,31:94,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[1,31],18:[1,39],19:[1,33],24:95,30:68,31:27,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[1,91],18:[1,39],19:[1,33],30:68,31:90,34:34,35:35,36:36,37:[1,69],39:96,40:[1,98],41:97,45:89,50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{7:[2,47],9:[2,47],11:[2,47],17:[2,47],20:[2,47],23:[2,47],40:[2,47],44:[2,47],51:[2,47],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],63:[2,47],64:[2,47]},{51:[1,99]},{7:[2,49],9:[2,49],11:[2,49],17:[2,49],20:[2,49],23:[2,49],40:[2,49],44:[2,49],51:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],63:[2,49],64:[2,49]},{20:[1,100],44:[1,101]},{20:[2,42],44:[2,42]},{17:[1,103],48:[1,102]},{16:[2,8],19:[2,8]},{11:[1,104]},{16:[1,31],18:[1,39],19:[1,33],24:105,30:68,31:27,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{23:[2,19]},{20:[2,20],23:[2,20],44:[2,20],51:[2,20]},{20:[2,21],23:[2,21],44:[2,21],51:[2,21]},{16:[1,91],18:[1,39],19:[1,33],30:68,31:90,34:34,35:35,36:36,37:[1,69],39:106,40:[1,108],41:107,45:89,50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{40:[1,109],44:[1,110]},{40:[1,111],44:[1,112]},{13:113,19:[1,11]},{40:[2,39],44:[2,39]},{40:[2,70],44:[2,70]},{17:[1,114],38:[1,72],40:[2,51],44:[2,51],49:[1,70],50:[1,71]},{7:[2,30],16:[2,30],18:[2,30],19:[2,30],20:[2,30],27:[2,30],28:[2,30],29:[2,30],37:[2,30],42:[2,30],43:[2,30],50:[2,30],53:[2,30],54:[2,30],55:[2,30]},{7:[2,31],16:[2,31],18:[2,31],19:[2,31],20:[2,31],27:[2,31],28:[2,31],29:[2,31],37:[2,31],42:[2,31],43:[2,31],50:[2,31],53:[2,31],54:[2,31],55:[2,31]},{7:[2,45],9:[2,45],11:[2,45],17:[2,45],20:[2,45],23:[2,45],40:[2,45],44:[2,45],51:[2,45],56:[2,45],57:[2,45],58:[2,45],59:[2,45],60:[2,45],61:[2,45],62:[2,45],63:[2,45],64:[2,45]},{51:[1,115]},{40:[1,116],44:[1,110]},{40:[1,117],44:[1,112]},{7:[2,37],9:[2,37],11:[2,37],17:[2,37],20:[2,37],23:[2,37],40:[2,37],44:[2,37],51:[2,37],56:[2,37],57:[2,37],58:[2,37],59:[2,37],60:[2,37],61:[2,37],62:[2,37],63:[2,37],64:[2,37]},{7:[2,48],9:[2,48],11:[2,48],17:[2,48],20:[2,48],23:[2,48],40:[2,48],44:[2,48],51:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],63:[2,48],64:[2,48]},{7:[2,50],9:[2,50],11:[2,50],17:[2,50],20:[2,50],23:[2,50],40:[2,50],44:[2,50],51:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50]},{16:[1,78],47:118},{16:[1,31],18:[1,39],19:[1,33],24:119,30:68,31:27,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{16:[1,31],18:[1,39],19:[1,33],24:120,30:68,31:27,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{8:[1,121]},{23:[2,18]},{40:[1,122],44:[1,110]},{40:[1,123],44:[1,112]},{13:124,19:[1,11]},{13:125,19:[1,11]},{16:[1,127],45:126},{13:128,19:[1,11]},{16:[1,31],18:[1,39],19:[1,33],30:68,31:129,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{7:[2,34],9:[2,34],11:[2,34],17:[2,34],20:[2,34],23:[2,34],40:[2,34],44:[2,34],51:[2,34],56:[2,34],57:[2,34],58:[2,34],59:[2,34],60:[2,34],61:[2,34],62:[2,34],63:[2,34],64:[2,34]},{16:[1,31],18:[1,39],19:[1,33],30:68,31:130,34:34,35:35,36:36,37:[1,69],50:[1,32],52:37,53:[1,38],54:[1,40],55:[1,41]},{7:[2,46],9:[2,46],11:[2,46],17:[2,46],20:[2,46],23:[2,46],40:[2,46],44:[2,46],51:[2,46],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],63:[2,46],64:[2,46]},{7:[2,35],9:[2,35],11:[2,35],17:[2,35],20:[2,35],23:[2,35],40:[2,35],44:[2,35],51:[2,35],56:[2,35],57:[2,35],58:[2,35],59:[2,35],60:[2,35],61:[2,35],62:[2,35],63:[2,35],64:[2,35]},{7:[2,36],9:[2,36],11:[2,36],17:[2,36],20:[2,36],23:[2,36],40:[2,36],44:[2,36],51:[2,36],56:[2,36],57:[2,36],58:[2,36],59:[2,36],60:[2,36],61:[2,36],62:[2,36],63:[2,36],64:[2,36]},{20:[2,41],44:[2,41]},{20:[2,43],44:[2,43]},{20:[2,44],44:[2,44]},{9:[1,131]},{13:132,19:[1,11]},{13:133,19:[1,11]},{7:[2,29],16:[2,29],18:[2,29],19:[2,29],20:[2,29],27:[2,29],28:[2,29],29:[2,29],37:[2,29],42:[2,29],43:[2,29],50:[2,29],53:[2,29],54:[2,29],55:[2,29]},{7:[2,32],9:[2,32],11:[2,32],17:[2,32],20:[2,32],23:[2,32],40:[2,32],44:[2,32],51:[2,32],56:[2,32],57:[2,32],58:[2,32],59:[2,32],60:[2,32],61:[2,32],62:[2,32],63:[2,32],64:[2,32]},{40:[2,38],44:[2,38]},{17:[1,114]},{7:[2,33],9:[2,33],11:[2,33],17:[2,33],20:[2,33],23:[2,33],40:[2,33],44:[2,33],51:[2,33],56:[2,33],57:[2,33],58:[2,33],59:[2,33],60:[2,33],61:[2,33],62:[2,33],63:[2,33],64:[2,33]},{40:[2,69],44:[2,69]},{40:[2,40],44:[2,40]},{5:[2,3]},{7:[2,27],16:[2,27],18:[2,27],19:[2,27],20:[2,27],27:[2,27],28:[2,27],29:[2,27],37:[2,27],42:[2,27],43:[2,27],50:[2,27],53:[2,27],54:[2,27],55:[2,27]},{7:[2,28],16:[2,28],18:[2,28],19:[2,28],20:[2,28],27:[2,28],28:[2,28],29:[2,28],37:[2,28],42:[2,28],43:[2,28],50:[2,28],53:[2,28],54:[2,28],55:[2,28]}],
defaultActions: {6:[2,1],7:[2,2],9:[2,4],15:[2,5],82:[2,19],105:[2,18],131:[2,3]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore whitespace (for now) */
break;
case 1:return 27
break;
case 2:return 28
break;
case 3:return 'ALLCAPS'
break;
case 4:return 8
break;
case 5:return 12
break;
case 6:return 37
break;
case 7:return 43
break;
case 8:return 42
break;
case 9:return 29
break;
case 10:return 54
break;
case 11:return 55
break;
case 12:return 53
break;
case 13:return 18
break;
case 14:return 62
break;
case 15:return 63
break;
case 16:return 64
break;
case 17:return 11
break;
case 18:return 23
break;
case 19:return 19
break;
case 20:return 20
break;
case 21:return 50
break;
case 22:return 51
break;
case 23:return 38
break;
case 24:return 40
break;
case 25:return 7
break;
case 26:return 9
break;
case 27:return 49
break;
case 28:return 44
break;
case 29:return 48
break;
case 30:return 56
break;
case 31:return 57
break;
case 32:return 60
break;
case 33:return 61
break;
case 34:return 58
break;
case 35:return 59
break;
case 36:return 17
break;
case 37:return 16
break;
case 38:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*\b)/,/^(?:\/\*.*\*\/)/,/^(?:[A-Z_][A-Z_\d]*\b)/,/^(?:[Cc][Ff][Ss][Cc][Rr][Ii][Pp][Tt])/,/^(?:[Cc][Oo][Mm][Pp][Oo][Nn][Ee][Nn][Tt])/,/^(?:[Ff][Uu][Nn][Cc][Tt][Ii][Oo][Nn])/,/^(?:[Rr][Ee][Tt][Uu][Rr][Nn])/,/^(?:[Ii][Nn][Cc][Ll][Uu][Dd][Ee])/,/^(?:[Vv][Aa][Rr])/,/^(?:[Tt][Rr][Uu][Ee])/,/^(?:[Ff][Aa][Ll][Ss][Ee])/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[\"\'].*[\"\'])/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:<)/,/^(?:>)/,/^(?:\.)/,/^(?:,)/,/^(?::)/,/^(?:==)/,/^(?:!=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:>=)/,/^(?:<=)/,/^(?:=)/,/^(?:[\w_][\w_\d]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cflint;
exports.Parser = cflint.Parser;
exports.parse = function () { return cflint.parse.apply(cflint, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}